{El productor musical Bizarrap organiza sesiones musicales con
diferentes artistas.Implementar un programa que lea y almacene
informacion de dichas sesiones. De cada sesion se lee:titulo de
de sesion, nombre de artista, genero musical(1: Trap, 2: Reggaeton, 
3:Urban, 4:Electronica, 5:Pop Rap)y cantidad de visualizaciones de
Youtube. La lectura finaliza cuando se lee la sesion del artista 
con nombre "Peso Pluma", la cual debe procesarse.La informacion debe
quedar almacenada en una estructura de datos ordenada por titulo de
sesion en forma ascendente.
Una vez leida y almacenada la informacion, se pide:
 A. Informar los codigos de genero musical con mayor cantidad
de visualizaciones en Youtube.
 B. Informar la cantidad de sesiones del genero "Reggaeton" cuya 
cantidad de visualizaciones contiene la misma cantidad de digitos pares
que impares.
 C. Realizar un modulo que reciba un titulo de sesion y elimina dicha
sesion de la estructura.El titulo de sesion puede no existir. Invocar
el modulo desarrollado en el programa principal con un titulo leido por
teclado}
program segundafechaT1;
type
	rango_genero=1..5;
	sesion=record
		titulo:string;
		artista:string;
		genero:rango_genero;
		visualizaciones:integer;
	end;

	lista=^nodo;
	nodo=record
		dato:sesion;
		sig:lista;
	end;
	
	vector_generos=array[rango_genero]of integer;
	
procedure inicializar(var v:vector_generos);
var	
	i:rango_genero;
begin
	for i:= 1 to 5 do
		v[i]:=0;
end;
procedure leerSesion(var s:sesion)
begin
	readln(s.artista);
	readln(s.titulo);
	readln(s.visualizaciones);
	readln(s.genero);
end;
procedure insertarOrdenado(var L:lista ; s:sesion);
var
	actual,anterior,nuevo:lista;
begin
	new(nuevo);
	nuevo^.dato:=s.titulo;
	nuevo^.sig:=nil;
	if(L=nil)then
		L:=nuevo
	else begin
		actual:=L;
		anterior:=L;
	while(actual<>nil)and(actual^.dato<nuevo^.dato) do
		begin
			anterior:=actual;
			actual:=actual^.sig;
		end;
	end;
	if(actual=L)then
	begin
		nuevo^.sig:=L;
		L:=nuevo;
	end
	else begin
		anterior^.sig:=nuevo;
		nuevo^.sig:=actual;
	end;
end;
procedure cargarLista(var L:lista);
var
	s:sesion;
begin
	repeat
		leerSesion(s);
		insertarOrdenado(L,s);//IMPLEMENTAR
	until(s.artista='Peso Pluma');
end;
function paresImpares(num:integer):boolean;
var
	pares,impares,digito:integer
begin
	pares:=0;
	impares:=0;
	digito:=num MOD 10;
	while(num<>0) do begin
		if(digito MOD 2 = 0)then
			pares:=pares+1
		else 
			impares:=impares+1;
		num:=num DIV 10;
	end;
	paresImpares:=(pares = impares);
end;
function cumple(s:sesion):boolean;
begin
	cumple:=(s.genero=2) and (paresImpares(s.visualizaciones))	
end;
procedure procesarLista(L:lista; var v:vector_generos);
var
	cant:integer;
begin
	cant:=0
	while(L<>nil) do  begin
		v[L^.dato.genero]:=v[L^.dato.genero]+l^.dato.visualizaciones;
		if(cumple(L^.dato))then begin
			cant:=cant+1
		end;
		L:=L^.sig;
	end;
	writeln(cant);
end;
procedure obtenerMaximos(v:vector_generos; var cod1,cod2: rango_genero);
var
	i:rango_genero;
	max1,max2:integer;
begin
	max1:=-1;
	max2:=-1;
	for i:= 1 to 5 do begin
		if(v[i]>max1) then begin
			max2:=max1;
			cod2:=cod1;
			cod1:=i
			max:=v[i];
		end
		else if(v[i]>max2) then begin
			max2:=v[i]:
			cod2:=i;
		end;
	end;
end;
procedure elminar(var L:lista; t:string);
var
	actual,anterior:lista
begin
	anterior:=L;
	actual:=L;
	while(act<>nil)and(act^.dato.titulo<t)then
	begin
		ant:=act
		act:=act^.sig;
	end;
	if(act<>nil) and (act^.dato.titulo=t) then begin
		if(act=L)then
			L:=L^.sig;
		else
			anterior^.sig:=actual^.sig;
		dispose(actual);
	end;
end;
var
	L:lista;
	v:vector_generos;
	codmax1,codmax2:rango_genero;
	titulo:string;
begin
	L:=nil;
	inicializar(v);
	cargarLista(L);
	procesarLista(L,v);
	obtenerMaximos(V,codmax1,codmax2);
	writeln(codmax1,codmax2);
	readln(titulo);
	eliminar(L,titulo);
end.