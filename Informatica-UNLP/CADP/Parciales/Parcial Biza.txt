 {El productor musical bizarrap organiza sesiones musciales con diferentes artistas. Se disponde de una estructura
de datos con la informacion de las sesiones de Bizarrap.De cada sesion se conoce: titulo, nombre del artista, el genero
musical(1:Trap Latino, 2:Reggaeton, 3:Urban, 4:Electronica, 5:Pop Rap), año de estreno y cantidad de reproducciones en Spotify.
La informacion no posee un orden especifico.
Procesar la informacion anterior, para:
 A. Informar los dos codigos de genero musical con menor cantidad de reproducciones en Spotify.
 B. Generar una lista ordenada por año que contenga las sesiones del genero "Trap Latino" y "Urban" cuya suma
de los digitos de la cantidad de reproducciones sea multiplo de 5.
 C. Realizar un modulo que reciba la lista generada en el punto anterior e informe para cada ño, la cantidad de sesiones 
realizadas junto al total de reproducciones de Spotify de esas sesiones.}
program SegundaFechaT2;
type
	rango_genero=1..5;
	
	sesion=record;
		titulo:string;
		nombre:string;
		genero:rango_genero;
		año:integer;
		reproducciones:integer;
	end;
	
	listaSesiones=^nodo;
	nodo=record
		dato:sesion;
		sig:listaSesiones;
	end;

	vector=array[rango_genero]of integer;
	
procedure cargarLista(var L:listaSesiones); //SE DISPONE	
procedure leerSesion(var s:sesion);
begin
	readln(s.titulo);
	readln(s.nombre);
	readln(s.genero);
	readln(s.año);
	readln(s.reproducciones);
end;
procedure insertarOrdenado(var L2:listaSesiones; s:sesion);
var
	nuevo,actual,anterior:listaSesiones
begin
	new(nuevo);
	nuevo^.dato:=s.año;
	actual:=L2;
	anterior:=L2;
	while(actual<>nil)and(s.año<actual^.dato.año) do begin
		anterior=actual
		actual:=actual^.sig;
	end;
	if(actual=anterior)then
		L2:=nuevo
	else 
		ant^.sig:=nuevo;
	nuevo^.sig:=actual;	
end;
function evaluarDigitos(num:integer):boolean;
	total:integer
	digito:integer
begin
	total:=0
	while(num<>0)do begin
		digito:=num MOD 10;
		total:=total+digito	
		num:=num DIV 10;
	end;
	evaluarDigitos:=(suma MOD 5 = 0);
end;
procedure inicializarVector(var v:vector);
var
	i:integer
begin
	for i:= 1 to 5 do begin
		v[i]:=0;
	end;
end;
function cumple(s:sesion):boolean;
begin
	cumple:=((s.genero=1) or (s.genero=3))and(evaluarDigitos(s.reproducciones);
end;
procedure calcularMinimo(v:vector; var cod1,cod2:rango_genero);
var	
	i:rango_genero;
	min1,min2:integer;
begin
	min1:=9999;
	min2:=9999;
	for i:=1 to 5 then begin
		if(v[i]<min1)then begin
			min2:=min1;
			cod2:=cod1;
			cod1:=i;
			min1:=v[i];
		end
		else if(v[i]<min2)then begin
			min2:=v[i];
			cod2:=i;
		end;
	end;	
end;
procedure procesarLista(L:listaSesiones var cod1,cod2:rango_genero; var L2:lista);
var
	v:vector
begin
	inicializarVector(v);
	while(L<>nil) do begin
		v[L^.dato.genero]:=v[L^.dato.genero]+L^.dato.reproducciones;
		if(cumple(L^.dato))then
			insertarOrdenado(L2,L^.dato);
		L:=L^.sig		
	end;
	calcularMinimos(v,cod1,cod2);
end;
procedure recorrerLista2(L2:listaSesiones);
var
	cantSesiones,totalRep,añoAct:integer;
begin
	while(L2<>nil)do begin
		añoAct:=L^.dato.año;
		cantSesiones:=0;
		totalRep:=0;
		while(L2<>nil)and(L^.dato.año=añoAct)do begin
			cantSesiones:=cantSesiones+;
			totalRep:=totalRep+L^.dato.reproducciones
			L2:=L2^.sig;
		end;
		writeln('En el año ',añoAct,' hubo ',cantSesiones,' sesiones con un total de ',totalRep,' reproducciones');
	end;
end;
var
	cod1,cod2:rango_genero
	L:listaSesiones;
	L2:listaSesiones;
begin
	L2:=nil;
	cargarLista(L); //SE DISPONE
	procesarLista(L,cod1,cod,L2);
	writeln(cod1,cod2);
	recorrerLista2(L2);
end.
